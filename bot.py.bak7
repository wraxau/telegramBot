from sqlalchemy.ext.asyncio import AsyncSession
import asyncio
from datetime import datetime, timedelta
import base64
import aiohttp
import json
from models import async_session, Questionnaire, Subscription, PendingPayment, engine, Base
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update
from lime_parser import LimeShopParser
from lichi_parser import LichiShopParser
from loverepublic_parser import LoveRepublicParser
from befree_parser import BefreeShopParser
from concurrent.futures import ThreadPoolExecutor
from dotenv import load_dotenv
from openai import OpenAI
import time
from collections import defaultdict
import logging
import os
from yookassa import Configuration, Payment
from uuid import uuid4
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL_1 = os.getenv("OPENAI_MODEL_1")  # GPT-4o
OPENAI_MODEL_2 = os.getenv("OPENAI_MODEL_2")  # GPT-4o-mini
OPENAI_MODEL_3 = os.getenv("OPENAI_MODEL_3")  # DALL-E 3

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
if not all([TELEGRAM_TOKEN, YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY, OPENAI_API_KEY]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
photo_last_request = defaultdict(lambda: 0)
search_last_request = defaultdict(lambda: 0)
chat_last_request = defaultdict(lambda: 0)
PHOTO_RATE_LIMIT = 15
SEARCH_RATE_LIMIT = 5
CHAT_RATE_LIMIT = 5

def rate_limit_check(user_id: int, request_type: str) -> bool:
    current_time = time.time()
    if request_type == "photo":
        if current_time - photo_last_request[user_id] < PHOTO_RATE_LIMIT:
            return False
        photo_last_request[user_id] = current_time
    elif request_type == "search":
        if current_time - search_last_request[user_id] < SEARCH_RATE_LIMIT:
            return False
        search_last_request[user_id] = current_time
    elif request_type == "chat":
        if current_time - chat_last_request[user_id] < CHAT_RATE_LIMIT:
            return False
        chat_last_request[user_id] = current_time
    return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–∞—Ä—Å–µ—Ä—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤
lime_parser = LimeShopParser()
lichi_parser = LichiShopParser()
loverepublic_parser = LoveRepublicParser()
befree_parser = BefreeShopParser()
executor = ThreadPoolExecutor(max_workers=4)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
class QuestionnaireStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_style = State()
    waiting_for_colors = State()

questions = [
    "–í–∞—à–µ –∏–º—è?",
    "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?",
    "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–¥–µ–∂–¥—ã –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ: –¥–µ–ª–æ–≤–æ–π, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π, –∫—ç–∂—É–∞–ª?",
    "–ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –≤ –æ–¥–µ–∂–¥–µ?"
]

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
            [KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"), KeyboardButton(text="–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")],
            [KeyboardButton(text="–¢—Ä–µ–Ω–¥—ã —Å–µ–∑–æ–Ω–∞"), KeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞ –ø–æ —Ñ–æ—Ç–æ")],
            [KeyboardButton(text="–ü–æ–∏—Å–∫ –æ–¥–µ–∂–¥—ã"), KeyboardButton(text="–ê–Ω–∫–µ—Ç–∞")],
            [KeyboardButton(text="–û–ø–ª–∞—Ç–∞")]
        ],
        resize_keyboard=True
    )

def get_questionnaire_actions_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ"), KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
            [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

def get_tariff_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–µ–Ω—å (11 RUB)", callback_data="tariff_day")],
            [InlineKeyboardButton(text="–ú–µ—Å—è—Ü (299 RUB)", callback_data="tariff_month")],
            [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ (749 RUB)", callback_data="tariff_3months")],
            [InlineKeyboardButton(text="–ì–æ–¥ (2499 RUB)", callback_data="tariff_year")]
        ]
    )

async def check_subscription(user_id: int, session: AsyncSession, request_type: str):
    result = await session.execute(select(Subscription).where(Subscription.user_id == user_id))
    user = result.scalars().first()
    if not user or not user.subscription_active:
        logger.info(f"[{user_id}] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {request_type}")
        return False
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    end_date = user.subscription_start + timedelta(days=user.duration_days)
    if datetime.now() > end_date:
        logger.info(f"[{user_id}] –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è {request_type}")
        await session.execute(
            update(Subscription)
            .where(Subscription.user_id == user_id)
            .values(subscription_active=False)
        )
        await session.commit()
        return False
    logger.info(f"[{user_id}] –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è {request_type}")
    return True

async def decrease_requests(user_id: int, session: AsyncSession, request_type: str):
    logger.info(f"[{user_id}] –õ–∏–º–∏—Ç—ã –Ω–µ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è –¥–ª—è {request_type}")
    return True

@dp.message(Command(commands=['start', 'menu']))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ö–æ–º–∞–Ω–¥–∞ /start")
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == "–ê–Ω–∫–µ—Ç–∞")
async def start_questionnaire(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–µ—Ç—ã")
    async with async_session() as session:
        result = await session.execute(select(Questionnaire).where(Questionnaire.user_id == user_id))
        questionnaire = result.scalars().first()
        if questionnaire:
            await message.answer(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=get_questionnaire_actions_keyboard()
            )
        else:
            await message.answer(questions[0], reply_markup=get_cancel_keyboard())
            await state.set_state(QuestionnaireStates.waiting_for_name)

@dp.message(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def view_questionnaire(message: types.Message):
    user_id = message.from_user.id
    async with async_session() as session:
        result = await session.execute(select(Questionnaire).where(Questionnaire.user_id == user_id))
        questionnaire = result.scalars().first()
        if questionnaire:
            response = (
                f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                f"–ò–º—è: {questionnaire.name}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {questionnaire.age}\n"
                f"–°—Ç–∏–ª—å: {questionnaire.style}\n"
                f"–õ—é–±–∏–º—ã–µ —Ü–≤–µ—Ç–∞: {questionnaire.colors}"
            )
            await message.answer(response, reply_markup=get_main_keyboard())
        else:
            await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def edit_questionnaire(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã")
    await message.answer(questions[0], reply_markup=get_cancel_keyboard())
    await state.set_state(QuestionnaireStates.waiting_for_name)

@dp.message(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def return_to_main_menu(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@dp.message(StateFilter(QuestionnaireStates), lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_questionnaire(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –û—Ç–º–µ–Ω–∞ –∞–Ω–∫–µ—Ç—ã")
    await message.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
    await state.clear()

@dp.message(QuestionnaireStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –í–≤–æ–¥ –∏–º–µ–Ω–∏: {message.text}")
    await state.update_data(name=message.text)
    await message.answer(questions[1], reply_markup=get_cancel_keyboard())
    await state.set_state(QuestionnaireStates.waiting_for_age)

@dp.message(QuestionnaireStates.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        age = int(message.text)
        logger.info(f"[{user_id}] –í–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞: {age}")
        await state.update_data(age=age)
        await message.answer(questions[2], reply_markup=get_cancel_keyboard())
        await state.set_state(QuestionnaireStates.waiting_for_style)
    except ValueError:
        logger.warning(f"[{user_id}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {message.text}")
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.", reply_markup=get_cancel_keyboard())

@dp.message(QuestionnaireStates.waiting_for_style)
async def process_style(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –í–≤–æ–¥ —Å—Ç–∏–ª—è: {message.text}")
    await state.update_data(style=message.text)
    await message.answer(questions[3], reply_markup=get_cancel_keyboard())
    await state.set_state(QuestionnaireStates.waiting_for_colors)

@dp.message(QuestionnaireStates.waiting_for_colors)
async def process_colors(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        user_data = await state.get_data()
        user_data['colors'] = message.text
        logger.info(f"[{user_id}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã: {user_data}")
        async with async_session() as session:
            result = await session.execute(select(Questionnaire).where(Questionnaire.user_id == user_id))
            questionnaire = result.scalars().first()
            if questionnaire:
                await session.execute(
                    update(Questionnaire)
                    .where(Questionnaire.user_id == user_id)
                    .values(
                        name=user_data['name'],
                        age=user_data['age'],
                        style=user_data['style'],
                        colors=user_data['colors']
                    )
                )
            else:
                q = Questionnaire(
                    user_id=user_id,
                    name=user_data['name'],
                    age=user_data['age'],
                    style=user_data['style'],
                    colors=user_data['colors']
                )
                session.add(q)
            await session.commit()
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –∞–Ω–∫–µ—Ç—ã: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
        await state.clear()

@dp.message(lambda message: message.text == "–û–ø–ª–∞—Ç–∞")
async def handle_payment(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É")
    await message.answer("üìß –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email –¥–ª—è —á–µ–∫–∞:", reply_markup=get_cancel_keyboard())
    await state.set_state(QuestionnaireStates.waiting_for_email)
    await state.update_data(user_id=user_id)

@dp.message(QuestionnaireStates.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    email = message.text.strip()
    logger.info(f"[{user_id}] –í–≤–æ–¥ email: {email}")
    if "@" not in email or "." not in email:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.", reply_markup=get_cancel_keyboard())
        return
    await state.update_data(email=email)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=get_tariff_keyboard())

@dp.callback_query(lambda c: c.data.startswith("tariff_"))
async def process_tariff_selection(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    tariff = callback_query.data
    user_data = await state.get_data()
    email = user_data.get('email')
    if not email:
        logger.error(f"[{user_id}] Email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await callback_query.message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ email –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=get_main_keyboard())
        await callback_query.answer()
        await state.clear()
        return
    tariff_info = {
        "tariff_day": {"name": "–î–µ–Ω—å", "value": "11.00", "tariff": "day", "duration_days": 1},
        "tariff_month": {"name": "–ú–µ—Å—è—Ü", "value": "299.00", "tariff": "month", "duration_days": 30},
        "tariff_3months": {"name": "3 –º–µ—Å—è—Ü–∞", "value": "749.00", "tariff": "3months", "duration_days": 90},
        "tariff_year": {"name": "–ì–æ–¥", "value": "2499.00", "tariff": "year", "duration_days": 365}
    }[tariff]
    logger.info(f"[{user_id}] –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {tariff_info['name']}")
    try:
        payment = Payment.create(
            {
                "amount": {"value": tariff_info['value'], "currency": "RUB"},
                "confirmation": {"type": "redirect", "return_url": "https://myclosetbot.ru/success"},
                "capture": True,
                "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ {tariff_info['name']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
                "metadata": {"user_id": str(user_id), "tariff": tariff_info['tariff']},
                "receipt": {
                    "customer": {
                        "email": email
                    },
                    "items": [
                        {
                            "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ {tariff_info['name']}",
                            "quantity": "1",
                            "amount": {
                                "value": tariff_info['value'],
                                "currency": "RUB"
                            },
                            "vat_code": 1,  # –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π (–±–µ–∑ –ù–î–°)
                            "payment_mode": "full_payment",
                            "payment_subject": "service"
                        }
                    ]
                }
            },
            uuid4()
        )
        async with async_session() as session:
            async with session.begin():
                session.add(PendingPayment(user_id=user_id, payment_id=payment.id))
                await session.commit()
        await callback_query.message.answer(
            f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment.confirmation.confirmation_url}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /check_payment",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    except Exception as e:
        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
        await state.clear()
    await callback_query.answer()

@dp.message(Command(commands=['check_payment']))
async def check_payment(message: types.Message):
    user_id = message.from_user.id
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(select(PendingPayment).where(PendingPayment.user_id == user_id))
            pending = result.scalars().first()
            if not pending:
                await message.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π.", reply_markup=get_main_keyboard())
                return
            try:
                payment = Payment.find_one(pending.payment_id)
                if payment.status == "succeeded":
                    tariff = payment.metadata.get("tariff", "month")
                    duration_days = {
                        "day": 1,
                        "month": 30,
                        "3months": 90,
                        "year": 365
                    }[tariff]
                    result = await session.execute(select(Subscription).where(Subscription.user_id == user_id))
                    subscription = result.scalars().first()
                    if subscription:
                        subscription.subscription_active = 1
                        subscription.tariff = tariff
                        subscription.search_requests_left = 9999
                        subscription.outfit_analysis_left = 9999
                        subscription.advice_messages_left = 9999
                        subscription.subscription_start = datetime.now()
                        subscription.duration_days = duration_days
                    else:
                        session.add(Subscription(
                            user_id=user_id,
                            subscription_active=1,
                            tariff=tariff,
                            search_requests_left=9999,
                            outfit_analysis_left=9999,
                            advice_messages_left=9999,
                            subscription_start=datetime.now(),
                            duration_days=duration_days
                        ))
                    await session.delete(pending)
                    await session.commit()
                    await message.answer(f"üí∏ –ü–æ–¥–ø–∏—Å–∫–∞ '{tariff}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {duration_days} –¥–Ω–µ–π!", reply_markup=get_main_keyboard())
                else:
                    await message.answer(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status}", reply_markup=get_main_keyboard())
            except Exception as e:
                logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "–ü–æ–∏—Å–∫ –æ–¥–µ–∂–¥—ã")
async def start_search(message: types.Message):
    user_id = message.from_user.id
    async with async_session() as session:
        if await check_subscription(user_id, session, "search"):
            logger.info(f"[{user_id}] –ü–æ–∏—Å–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω")
            await message.answer(
                "üîé –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n- –ø–ª–∞—Ç—å–µ\n- –¥–∂–∏–Ω—Å—ã\n- —Ñ—É—Ç–±–æ–ª–∫–∞",
                reply_markup=types.ForceReply(selective=True)
            )
        else:
            logger.info(f"[{user_id}] –ü–æ–∏—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            await message.answer(
                "üîç –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                reply_markup=get_main_keyboard()
            )

@dp.message(lambda message: message.reply_to_message and "—á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏" in message.reply_to_message.text.lower())
async def handle_search_reply(message: types.Message):
    user_id = message.from_user.id
    async with async_session() as session:
        if await check_subscription(user_id, session, "search"):
            await handle_fashion_search(message)
        else:
            logger.info(f"[{user_id}] –ü–æ–∏—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ handle_search_reply")
            await message.answer(
                "üîç –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                reply_markup=get_main_keyboard()
            )

async def handle_fashion_search(message: types.Message):
    user_id = message.from_user.id
    if not rate_limit_check(user_id, "search"):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥.", reply_markup=get_main_keyboard())
        return
    try:
        search_query = message.text.strip()
        logger.info(f"[{user_id}] –ü–æ–∏—Å–∫: {search_query}")
        status_message = await message.answer(f"üîç –ò—â—É '{search_query}'...")
        lime_task = asyncio.create_task(run_parser(lime_parser, search_query, "LIME"))
        lichi_task = asyncio.create_task(run_parser(lichi_parser, search_query, "LICHI"))
        loverepublic_task = asyncio.create_task(run_parser(loverepublic_parser, search_query, "LOVE REPUBLIC"))
        lime_urls, lichi_urls, loverepublic_urls = await asyncio.gather(
            lime_task, lichi_task, loverepublic_task
        )
        response_text = f"üõç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{search_query}':\n\n"
        if lime_urls:
            response_text += "üè™ LIME:\n" + "\n".join(f"{i}. {url}" for i, url in enumerate(lime_urls[:5], 1)) + "\n\n"
        if lichi_urls:
            response_text += "üè™ LICHI:\n" + "\n".join(f"{i}. {url.url}" for i, url in enumerate(lichi_urls[:5], 1)) + "\n\n"
        if loverepublic_urls:
            response_text += "üè™ LOVE REPUBLIC:\n" + "\n".join(f"{i}. {url.url}" for i, url in enumerate(loverepublic_urls[:5], 1)) + "\n\n"
        if any([lime_urls, lichi_urls, loverepublic_urls]):
            await status_message.edit_text(response_text)
            try:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"search_results/search_{user_id}_{timestamp}.json"
                os.makedirs("search_results", exist_ok=True)
                results = {
                    "user_id": user_id,
                    "query": search_query,
                    "timestamp": datetime.now().isoformat(),
                    "lime_urls": lime_urls,
                    "lichi_urls": [item.url for item in lichi_urls] if lichi_urls else [],
                    "loverepublic_urls": [item.url for item in loverepublic_urls] if loverepublic_urls else []
                }
                with open(filename, "w", encoding="utf-8") as f:
                    json.dump(results, f, ensure_ascii=False, indent=2)
            except Exception as e:
                logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        else:
            await status_message.edit_text(f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text in ["–¢—Ä–µ–Ω–¥—ã —Å–µ–∑–æ–Ω–∞", "—Ç—Ä–µ–Ω–¥—ã", "–º–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã", "—á—Ç–æ –≤ –º–æ–¥–µ"])
async def handle_trends(message: types.Message):
    user_id = message.from_user.id
    if not rate_limit_check(user_id, "chat"):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥.", reply_markup=get_main_keyboard())
        return
    try:
        await message.answer("üö® –ü–æ–¥–±–∏—Ä–∞—é —Ç—Ä–µ–Ω–¥—ã –≤–µ—Å–Ω–∞ 2025...", reply_markup=get_main_keyboard())
        response = client.chat.completions.create(
            model=OPENAI_MODEL_1,
            messages=[
                {"role": "system", "content": (
                    "You are a fashion consultant. Write a short message about current fashion trends in Russian. "
                    "Maximum 2-3 sentences, direct and understandable."
                )},
                {"role": "user", "content": "Spring 2025 fashion trends"}
            ]
        )
        trends_text = response.choices[0].message.content
        await message.answer(f"–¢—Ä–µ–Ω–¥—ã: {trends_text}", reply_markup=get_main_keyboard())
        await message.answer("üì∏ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—Ä–∞–∑ –≤ —Ç—Ä–µ–Ω–¥–∞—Ö –≤–µ—Å–Ω—ã 2025...", reply_markup=get_main_keyboard())
        image_response = client.images.generate(
            model="dall-e-3",
            prompt=(
                f"–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–æ–ª–æ–¥–æ–π –∂–µ–Ω—â–∏–Ω—ã, –æ–¥–µ—Ç–æ–π –≤ —Ç—Ä–µ–Ω–¥–æ–≤—É—é –æ–¥–µ–∂–¥—É: {trends_text}. "
                "–ù–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ñ–æ–Ω–µ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –º–æ–¥–Ω–æ–π –æ–¥–µ–∂–¥–µ."
            ),
            n=1,
            size="1024x1024",
            quality="standard"
        )
        image_url = image_response.data[0].url
        logger.info(f"[{user_id}] –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
        await message.answer_photo(image_url, caption="–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞!", reply_markup=get_main_keyboard())
    except Exception as e:
        logger.debug(f"[{user_id}] –û—à–∏–±–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–Ω–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è handle_photo")
    async with async_session() as session:
        if await check_subscription(user_id, session, "photo"):
            logger.info(f"[{user_id}] –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ—à—ë–Ω")
            try:
                await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...", reply=True)
                photo = message.photo[-1]
                logger.info(f"[{user_id}] –§–æ—Ç–æ ID: {photo.file_id}, size={photo.file_size}")
                file = await bot.get_file(photo.file_id)
                file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file.file_path}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(file_url) as response:
                        if response.status != 200:
                            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: HTTP {response.status}")
                            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ.", reply_markup=get_main_keyboard())
                            return
                        image_data = await response.read()
                logger.info(f"[{user_id}] –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(image_data)} bytes")
                if len(image_data) > 10 * 1024 * 1024:
                    logger.error(f"[{user_id}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ú–ë")
                    await message.answer("‚ö†Ô∏è –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å. 10 –ú–ë).", reply_markup=get_main_keyboard())
                    return
                if not image_data.startswith(b'\xFF\xD8') and not image_data.startswith(b'\x89PNG'):
                    logger.error(f"[{user_id}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    await message.answer("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPEG –∏ PNG.", reply_markup=get_main_keyboard())
                    return
                try:
                    image_base64 = base64.b64encode(image_data).decode('utf-8')
                    logger.info(f"[{user_id}] Base64 length: {len(image_base64)}")
                    if not image_base64.startswith(('/9j/', 'iVBOR')):
                        logger.error(f"[{user_id}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç base64")
                        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ JPEG –∏–ª–∏ PNG.", reply_markup=get_main_keyboard())
                        return
                    with open(f"/tmp/photo_{user_id}.txt", "w") as f:
                        f.write(image_base64[:1000])
                except Exception as e:
                    logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {str(e)}")
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ.", reply_markup=get_main_keyboard())
                    return
                try:
                    response = client.chat.completions.create(
                        model=OPENAI_MODEL_2,
                        messages=[
                            {
                                "role": "user",
                                "content": [
                                    {
                                        "type": "text",
                                        "text": (
                                            "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç, –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–æ—Ç–æ. "
                                            "–ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –µ—Å—Ç—å –æ–¥–µ–∂–¥–∞, –æ–ø–∏—à–∏ –µ—ë —Å—Ç–∏–ª—å, —Ü–≤–µ—Ç–∞ –∏ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º —Ç–µ–∫—Å—Ç–µ, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –ø–∏—à–µ—à—å –¥—Ä—É–≥—É. "
                                            "–ï—Å–ª–∏ –æ–¥–µ–∂–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–∞–ø–∏—à–∏, —á—Ç–æ –æ–¥–µ–∂–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –∏ –¥–∞–π 1-2 –æ–±—â–∏—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ —Å—Ç–∏–ª—é. "
                                            "–í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π 1-2 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ–±—Ä–∞–∑–∞. "
                                            "–ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–º —Ç–æ–Ω–µ, 4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
                                        )
                                    },
                                    {
                                        "type": "image_url",
                                        "image_url": {
                                            "url": f"data:image/jpeg;base64,{image_base64}",
                                            "detail": "high"
                                        }
                                    }
                                ]
                            }
                        ],
                        max_tokens=500,
                        timeout=30
                    )
                    analysis = response.choices[0].message.content
                    logger.info(f"[{user_id}] –û—Ç–≤–µ—Ç OpenAI: {analysis}")
                    await message.answer(analysis, reply_markup=get_main_keyboard())
                except Exception as e:
                    logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ OpenAI: {str(e)}")
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {str(e)}", reply_markup=get_main_keyboard())
            except Exception as e:
                logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {str(e)}")
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
        else:
            logger.info(f"[{user_id}] –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            await message.answer("üîç –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text in ["–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", "–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"])
async def handle_text_buttons(message: types.Message):
    user_id = message.from_user.id
    text = message.text.lower()
    logger.info(f"[{user_id}] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {text}")
    if text == "–ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç":
        await message.answer(
            "[–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç](https://myclosetai.tilda.ws/myclosetai)",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
    elif text == "–æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ï—Å–ª–∏ —Ç—ã –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π - –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥—É—Ç.\n\n"
            "1. –°—Ä–µ–¥–∏ –∫–∞–∫–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –±–æ—Ç –∏—â–µ—Ç –æ–¥–µ–∂–¥—É?\n"
            "- –ù–∞—à –±–æ—Ç —É–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –æ–¥–µ–∂–¥—É –∏–∑ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–æ–≤ Lichi, Lime, Love Republic. –ß—É—Ç—å –ø–æ–∑–∂–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –±–æ–ª—å—à–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n\n"
            "2. –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–ø–∏—Å–∫—É?\n"
            "- –ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫—É —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∏—Å–∫ –æ–¥–µ–∂–¥—ã, –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–∑–∞ –∏ —Å—Ç–∏–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤.\n\n"
            "3. –ö–∞–∫ —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?\n"
            "- –ú—ã –≤ –ø–æ–∏—Å–∫–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤! –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –±–ª–æ–≥ –æ –º–æ–¥–µ –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥, –ø–∏—à–∏ –Ω–∞—à–µ–º—É CEO @soffree –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.",
            reply_markup=get_main_keyboard()
        )
    elif text == "–Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥":
        await message.answer("üí¨ –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –æ –º–æ–¥–µ!", reply_markup=get_main_keyboard())
    elif text == "–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await message.answer(
            "üìù –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤: https://docs.google.com/forms/d/e/1FAIpQLSco6q3-PPSwZ7-Rqw02lVaNT4gAaIaJGLUlvNUCYlACUrklyYw/viewform",
            reply_markup=get_main_keyboard()
        )

@dp.message()
async def chat_with_stylist(message: types.Message):
    user_id = message.from_user.id
    async with async_session() as session:
        if await check_subscription(user_id, session, "chat"):
            logger.info(f"[{user_id}] –î–∏–∞–ª–æ–≥ —Ä–∞–∑—Ä–µ—à—ë–Ω")
            if not rate_limit_check(user_id, "chat"):
                await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥.", reply_markup=get_main_keyboard())
                return
            try:
                response = client.chat.completions.create(
                    model=OPENAI_MODEL_1,
                    messages=[
                        {"role": "system", "content": (
                            "You are a fashion stylist. Answer in Russian, naturally and conversationally. "
                            "Focus on fashion advice, avoid personal questions."
                        )},
                        {"role": "user", "content": message.text}
                    ],
                    timeout=30
                )
                await message.answer(response.choices[0].message.content, reply_markup=get_main_keyboard())
            except Exception as e:
                logger.debug(f"[{user_id}] –û—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–∞: {str(e)}")
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞.", reply_markup=get_main_keyboard())
        else:
            logger.info(f"[{user_id}] –î–∏–∞–ª–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", reply_markup=get_main_keyboard())

async def run_parser(parser, query, store_name):
    try:
        loop = asyncio.get_event_loop()
        urls = await loop.run_in_executor(executor, parser.get_product_urls, query)
        logger.info(f"[{store_name}] –í–µ—Ä–Ω—É–ª {len(urls)} urls")
        return urls
    except Exception as e:
        logger.error(f"[{store_name}] –û—à–∏–±–∫–∞: {e}")
        return []

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        await dp.start_polling(bot)
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
    finally:
        executor.shutdown(wait=True)

if __name__ == "__main__":
    asyncio.run(main())
